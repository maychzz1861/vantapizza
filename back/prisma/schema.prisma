// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

enum Gender {
  MALE
  FEMALE
}

model User {
    id               Int                @id @default(autoincrement())
    role             Role               @default(USER)
    firstName        String             @map("first_name")
    lastName         String             @map("last_name")
    phoneNumber     String?            @map("number_phone")
    gender           Gender
    email            String             @unique
    password         String
    shipping_Address Shipping_Address[]
    cart             Cart[]
    order            Order[]
}

model Shipping_Address {
    id            Int     @id @default(autoincrement())
    firstName     String  @map("first_name")
    lastName      String  @map("last_name")
    phone         String
    email         String?
    address       String
    province      String
    district      String
    subDistrict   String  @map("sub_district")
    isMainAddress Boolean @map("is_main_adderss")
    user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId        Int     @map("user_id")
}

model Cart {
    id           Int            @id @default(autoincrement())
    total        Int            @default(0)
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId       Int            @unique @map("user_id")
    cart_product Cart_product[]
}

model Cart_product {
    id       Int   @id @default(autoincrement())
    quantity Int   @default(1)
    pizza    Pizza @relation(fields: [pizzaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    pizzaId  Int   @map("pizza_id")
    cart     Cart  @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    cartId   Int   @map("cart_id")
}

enum CrustType {
    THIN_CRISPY
    THICK_SOFT
}

enum PizzaSize {
    SMALL
    MEDIUM
    LARGE
}

model Pizza {
    id            Int             @id @default(autoincrement())
    image         String
    name          String
    description   String
    crustType     CrustType       @map("crust_type")
    size          PizzaSize
    price         Int             @default(0)
    cart_product  Cart_product[]
    order_product Order_product[]
}

model Order_product {
    id       Int   @id @default(autoincrement())
    qunatity Int   @default(1)
    order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    orderId  Int
    pizza    Pizza @relation(fields: [pizzaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    pizzaId  Int   @map("pizza_id")
}

model Order {
    id            Int             @id @default(autoincrement())
    OrderDate     DateTime        @default(now()) @map("order_date")
    total         Int             @default(0)
    user          User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId        Int             @map("user_id")
    order_product Order_product[]
    payment       Payment[]
}

model Payment {
    id            Int      @id @default(autoincrement())
    paymentDate   DateTime @default(now()) @map("payment_date")
    paymentMethod String   @map("payment_method")
    amountPaid    Float    @map("amount_paid")
    order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    orderId       Int
}
